name: CI-CD DevSecOps (Juice Shop)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  changes:
    name: Detect changed files
    runs-on: ubuntu-latest
    outputs:
      code_changed: ${{ steps.filter.outputs.code }}
      docs_changed: ${{ steps.filter.outputs.docs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v4
        with:
          filters: |
            code:
              - 'app.ts'
              - 'server.ts'
              - 'frontend/**'
              - 'lib/**'
              - 'models/**'
              - 'routes/**'
              - 'package.json'
              - 'frontend/package.json'
              - 'Dockerfile'
              - '**/*.ts'
              - '**/*.js'
            docs:
              - 'docs/**'

      - name: List changed files
        run: |
          git diff --name-only HEAD^ HEAD > changed_files.txt || true

      - name: Upload changed files list
        uses: actions/upload-artifact@v4
        with:
          name: changed-files
          path: changed_files.txt
          if-no-files-found: ignore

  secrets_scan:
    name: Secrets scan (Talisman)
    needs: changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Talisman
        shell: bash
        run: |
          curl -sSL -o talisman.tar.gz https://github.com/thoughtworks/talisman/releases/latest/download/talisman_linux_amd64.tar.gz
          tar -xzf talisman.tar.gz
          sudo mv talisman /usr/local/bin/talisman
          talisman --version

      - name: Run Talisman (full repo)
        shell: bash
        run: |
          # PRODUCTION MODE: Fail if secrets detected (respects .talismanrc exceptions)
          talisman --githook pre-commit --scanWithChecksum --ignoreHistory=false
          echo "✅ No secrets detected or all exceptions documented in .talismanrc"

      - name: Export Talisman report (on failure)
        if: failure()
        shell: bash
        run: |
          talisman --githook pre-commit --output talisman-report || true
          zip -r talisman-report.zip talisman-report || true

      - name: Upload Talisman report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: talisman-report
          path: talisman-report.zip
          if-no-files-found: ignore

  sast_codeql:
    name: SAST (CodeQL)
    needs: secrets_scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v4
        with:
          languages: javascript-typescript
          queries: +security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v4

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4
        with:
          output: codeql-results
          upload-database: true
          
      - name: Upload CodeQL Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: codeql-sarif-results
          path: codeql-results/**/*.sarif
          if-no-files-found: warn   

  sca_snyk:
    name: SCA (Snyk)
    needs: secrets_scan
    runs-on: ubuntu-latest
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        shell: bash
        run: |
          npm ci || npm install

      - name: Install frontend dependencies
        shell: bash
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend
            npm ci || npm install --legacy-peer-deps
          fi

      - name: Setup Snyk CLI
        uses: snyk/actions/setup@master

      - name: Run Snyk test (backend) - PRODUCTION MODE
        shell: bash
        run: |
          mkdir -p reports
          # Fail on HIGH or CRITICAL vulnerabilities that have available fixes
          snyk test \
            --severity-threshold=high \
            --fail-on=upgradable \
            --json-file-output=reports/snyk-backend.json \
          || (echo "❌ High/Critical vulnerabilities with available fixes detected in backend" && exit 1)

      - name: Run Snyk test (frontend) - PRODUCTION MODE
        shell: bash
        run: |
          if [ -f frontend/package.json ]; then
            snyk test \
              --file=frontend/package.json \
              --severity-threshold=high \
              --fail-on=upgradable \
              --json-file-output=reports/snyk-frontend.json \
            || (echo "❌ High/Critical vulnerabilities with available fixes detected in frontend" && exit 1)
          fi

      - name: Upload Snyk reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-reports
          path: reports
          if-no-files-found: ignore

  dast_zap:
    name: DAST (OWASP ZAP Baseline)
    needs: [sast_codeql, sca_snyk]
    runs-on: ubuntu-latest
    services:
      juice:
        image: bkimminich/juice-shop:latest
        ports:
          - 3000:3000
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for Juice Shop to be ready
        run: |
          for i in {1..30}; do
            curl -sSf http://localhost:3000 && break
            sleep 5
          done
          
      - name: Run OWASP ZAP Baseline Scan - PRODUCTION MODE
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          cmd_options: '-a'
          fail_action: true  # PRODUCTION: Fail on HIGH risk findings
          token: ''
          allow_issue_writing: false

      - name: Upload ZAP reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            report_html.html
            report_json.json
            report_md.md
          if-no-files-found: ignore

  container_security_trivy:
    name: Container security (Trivy)
    needs: [sast_codeql, sca_snyk]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Build Docker Image
        run: |
          docker build -t juice-shop:latest .
      
      - name: Scan Docker Image with Trivy - PRODUCTION MODE
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'juice-shop:latest'
          format: 'json'
          ignore-unfixed: false  # PRODUCTION: Report all vulnerabilities
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'  # Focus on critical issues
          exit-code: '1'  # PRODUCTION: Fail on CRITICAL/HIGH findings
          output: 'trivy-report.json'
      
      - name: Upload Trivy JSON Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results-json
          path: trivy-report.json